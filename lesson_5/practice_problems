#1
arr = ['10', '11', '9', '7', '8']

arr.sort do |a,b|
  b.to_i <=> a.to_i
end

#2
books = [
  {title: 'One Hundred Years of Solitude', author: 'Gabriel Garcia Marquez', published: '1967'},
  {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', published: '1925'},
  {title: 'War and Peace', author: 'Leo Tolstoy', published: '1869'},
  {title: 'Ulysses', author: 'James Joyce', published: '1922'}
]

books.sort_by do |element|
  element[:published]
end

#3
arr1 = ['a', 'b', ['c', ['d', 'e', 'f', 'g']]]
arr1[2][1][3]

arr2 = [{first: ['a', 'b', 'c'], second: ['d', 'e', 'f']}, {third: ['g', 'h', 'i']}]
arr2[1][:third][0]

arr3 = [['abc'], ['def'], {third: ['ghi']}]
arr3[2][:third][0][0]

hsh1 = {'a' => ['d', 'e'], 'b' => ['f', 'g'], 'c' => ['h', 'i']}
hsh1['b'][1]

hsh2 = {first: {'d' => 3}, second: {'e' => 2, 'f' => 1}, third: {'g' => 0}}
hsh2[:third].keys[0]

#4
arr1 = [1, [2, 3], 4]
arr1[1][1] = 4
p arr1

arr2 = [{a: 1}, {b: 2, c: [7, 6, 5], d: 4}, 3]
arr2[2] = 4
p arr2

hsh1 = {first: [1, 2, [3]]}
hsh1[:first][2][0] = 4
p hsh1

hsh2 = {['a'] => {a: ['1', :two, 3], b: 4}, 'b' => 5}
hsh2[['a']][:a][2] = 4
p hsh2

#5
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}

total_male_age = 0
munsters.each do |munster, details|
  if details['gender'] == 'male'
    total_male_age += details['age']
  end
end
puts total_male_age

#OR

male_munsters = munsters.select do |munster, details|
  details['gender'] == 'male'
end
total_male_age = 0
male_munsters.each do |male, details|
  total_male_age += details['age']
end
puts total_male_ages

#6
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}

munsters.each do |munster, details|
  name = munster
  age = details['age']
  gender = details['gender']
  puts "#{name} is a #{age} year old #{gender}."
end

#7
a = 2
b = [3, 8]

#8
hsh = {first: ['the', 'quick'], second: ['brown', 'fox'], third: ['jumped'], fourth: ['over', 'the', 'lazy', 'dog']}

hsh.each do |key, words|
  words.each do |word|
    word.chars do |letter|
      if %w(a e i o u A E I O U).include?(letter)
        puts letter
      end
    end
  end
end

#9
arr = [['b', 'c', 'a'], [2, 1, 3], ['blue', 'black', 'green']]

arr.map do |array|
  if %w(0...9).include?(array)
    array.sort.reverse
  else array.sort do |a, b|
    b <=> a
  end
  end
end

#10
[{a: 1}, {b: 2, c: 3}, {d: 4, e: 5, f: 6}].map do |hash|
  new_hash = {}
  hash.map do |key, value|
    new_hash[key] = value += 1
  end
  new_hash
end

#11
arr = [[2], [3, 5, 7], [9], [11, 13, 15]]
arr.map do |inner_array|
  inner_array.select do |n|
    n % 3 == 0
  end
end

#12
arr = [[:a, 1], ['b', 'two'], ['sea', {c: 3}], [{a: 1, b: 2, c: 3, d: 4}, 'D']]

def to_h(array)

hash = {}

array.each do |inner_array|
  hash[inner_array[0]] = inner_array[1]
end

hash
end

to_h(arr)

#13
arr = [[1, 6, 7], [1, 4, 9], [1, 8, 3]]

arr.sort_by do |inner_array|
  inner_array.select do |n|
    n.odd?
  end
end

#14
hsh = {
  'grape' => {type: 'fruit', colors: ['red', 'green'], size: 'small'},
  'carrot' => {type: 'vegetable', colors: ['orange'], size: 'medium'},
  'apple' => {type: 'fruit', colors: ['red', 'green'], size: 'medium'},
  'apricot' => {type: 'fruit', colors: ['orange'], size: 'medium'},
  'marrow' => {type: 'vegetable', colors: ['green'], size: 'large'},
}

hsh.map do |_, details|
  case
  when details[:type] == 'fruit'
    details[:colors].map { |color| color.capitalize }
  else
    details[:size].upcase
  end
end

#15
arr = [{a: [1, 2, 3]}, {b: [2, 4, 6], c: [3, 6], d: [4]}, {e: [8], f: [6, 10]}]

arr.select do |hash|
  hash.all? do |_, value_array|
    value_array.all? do |n|
      n.even?
    end
  end
end

#16
def hexadecimal_number
    characters = %w(0 1 2 3 4 5 6 7 8 9 a b c d e f g)
    hexa = ''
    
    loop do
      if hexa.size == 8 || hexa.size == 13 || hexa.size == 18 || hexa.size == 23
        hexa << '-'
      else
        hexa << characters.sample
      end
    
      break if hexa.size == 36
    end
    hexa
end

p hexadecimal_number

