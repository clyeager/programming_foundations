#example_3

output: 
1
3

return value: [1,3]

Line 1-action:method call (map)-object:outer array-side effect:none-return value:new array[1,3]-return value used:no
Lines 1-4-action:block execution-object:each sub-array-side effect:none-return value:integer at index 0 of sub-array-return value used:yes, by map for transformation
Line 2-action:method call (puts)-object:integer at index 0 of each sub-array-side effect:ouputs string representation of integer-return value: nil-return value used:no
Line 2-action:method call (first)-object:each sub-array-side effect:none-return value:element at index 0 of sub-array-return value used:yes, by puts
Line 3-action:method call (first)-object:each sub-array-side effect:none-return value:element at index 0 of each sub-array-return value used:yes, to determine return value of the block

#example_4

output:
18
7
12

return value: [[18, 7], [3, 12]]

Line 1-action:variable assignment-object:n/a-side effects:none-return value:[[18, 7], [3, 12]]-return value used:no
Line 1-action:method call (each)-object:outer array-side effect:none-return value:original array [[18, 7], [3, 12]]-return value used:yes, by my_arr variable assignment
Lines 1-7-action:outer block execution-object:each sub-array-side effect:none-return value:each sub-array-return value used:no
Line 2-action:method call (each)-object:each sub-array-side effect:none-return value:original sub-array-return value used:no
Lines 2-6-action:inner block execution-object:each element in each sub-array-side effect:none-return value:nil-return value used:no
Line 3-action:comparison (>)-object:each element in each sub-array-side effect:none-return value:boolean-return value used:yes, used by if conditional
Lines 3-5-action:conditional (if)-object:each element of each sub-array-side effect:none-return value:nil-return value used:used to determine the return value of the inner block
Line 4-action:method call (puts)-object:each element in each sub-array-side effect:outputs a string representation of an integer-return value:nil-return value used:used to determine return value of inner block

#Example_5

Return value: [[2, 4], [6, 8]]

Line 1-action:method call (map)-object:outer array-side effects:none-return value:[[2, 4], [6, 8]]-return value used:no
Lines 1-5-action:outer block execution-object:each sub-array-side effect:none-return value:[[2, 4], [6, 8]]-return value used:yes, by map for transformation
Line 2-action:method call (map)-object:each sub-array-side effects:none-return value:array of each element in each sub-array times 2-return value used:yes,to determine outer block's return value
Lines 2-5-action:inner block execution-object:each sub-array-side effect:none-return value:an integer for each iteration-return value used:yes,by map to transform the array
Line 3-action:num * 2-object:n/a-side effects:none-return value:integer-return value used:yes, for return value of inner block

#Example_6

In the outer block we are using a method call to select, which will select the hash or hashes where the return value of the block is truthy, and will return a new array containing these hashes. In the inner block we use a method call to all? method, which will return true if all key/value pairs in the hash have a truthy block return.
Value[0] == key.to_s is used to access the first element of each value, and the then compare it to the key in its string version to see if there is a truthy match.
Only the last hash is returned in a new array because only one key/value pair in the first hash evaluates to true.
If we used any? instead of all? the output would be an array that would include both original hashes, because any? is checking to see if any key/value pair in the hash returns true in the block execution.

#Example_7

In this example, each time we iterate with the top level block, it calls map on the sub-array. Then within the inner block, to_i is called on each string in the sub-array. A new array of integers is then returned. The outer array is then sorted by new integer values in the sub-arrays.

#Example_8

Because each array sub-array contains a different objects, we use map to transform, and then select in the inner block to select the items in each sub-array where the return value is truthy. Since we have two different kinds of objects, we must have two different criteria, which we use an if statment for. If the item during iteration is an integer, we select it if item > 13 evaluates to true. If the item is a string, each will then be selected based on the truthiness of .size < 6. The return value overall will then be [[27], ['apple']]

#Example_9

In this example, map is called on the original array so it will transform based on the lower block levels return values. However when we call each on the two next level inner arrays, we know that each will return the original inner arrays and the return value will be sent to map. Therefore the return value overall will be an exact copy (made by map) of the original array.

#Example_10

The fianl return value will be [[[2,3], [4,5]], [6,7]]
We first call map on the orignal array, which contains nested arrays of unequal size. We then call map on then two next level arrays (one containing two more arrays, and one containing two individual elements). Because of this difference, we use an if statement to determine if the element inside the sub-array is another array or an individual integer element. If el.to_s.size == 1 evaluates to true, it is an integer and can be incremented by 1. Else, we need to perform another map method on the array, so we can gain access to the individual elements. Once we can access these 'n' elements through the map call, we incrememnt by 1. The return value of the if statement, and subsequently the second level map call and block, will be the arrays incremented by 1 each. This new array is then passed back to the original map call, which uses it to transform the original array into yet another new array, which also contains the new incremented values.
